/*
 * @author: Lander Buysse
 * @file: inputocontrol.c
 */

//files to include
#include <stdio.h>
#include "inputcontrol.h"
#include "joystickDriver.h"
#include "buttonDriver.h"
#include "MK64F12.h"
#include "main.h"

//initialise functions to call
void initJoystick(void){
	joystickInit();
}

void initSwitch2(void){
	SW2Init();
}

//getters
int getHour(void){
	return hour;
}

int getMin(void){
	return min;
}

int getSec(void){
	return sec;
}

char * getSetting(int setting){
	char *str="";
	switch(setting){
		case 0:
			str="Standard";
			break;
		case 1:
			str="Set Time";
			break;
		case 2:
			str="Set Alarm";
			break;
		case 3:
			str="Set Music";
			break;
		default:
			setting=0; //just in case something went wrong
			str="Standard";
		break;
	}
	return str;
}

//setters
void incrementTime(int hourMinSec){
	switch(hourMinSec){
		case 0: //increment hour
			if (hour<23){
				hour=hour+1;
			}else{
				hour=0;
			}
			break;
		case 1: //increment min
			if (min<59){
				min=min+1;
			}else{
				min=0;
			}
			break;
		case 2: //increment sec
			if (sec<59){
				sec=sec+1;
			}else{
				sec=0;
			}
			break;
		default:
			//do nothing
			break;
	}
}

void decrementTime(int hourMinSec){
	switch(hourMinSec){
			case 0: //decrement hour
				if (hour>0){
					hour=hour-1;
				}else{
					hour=23;
				}
				break;
			case 1: //increment min
				if (min>0){
					min=min-1;
				}else{
					min=59;
				}
				break;
			case 2: //increment sec
				if (sec>0){
					sec=sec-1;
				}else{
					sec=59;
				}
				break;
			default:
				//do nothing
				break;
		}
}

void setAlarm(int onOff){
	alarmOnOff=onOff;
}

void PORTC_IRQHandler(void){
	switch(getState){
			case 0: //STANDARD
				//joystick left
				if((PORTC->PCR[LEFT] & 0x01000000)==0x01000000){ //check if interrupt was called on left pin
					if (cState==0){ //go to the previous option
						cState=3;
					}
					else{
				        cState = --cState % 4;
				    }
					PORTC->PCR[LEFT] &= ~(0 << 24); //clear the interrupt for the left pin
					//TODO: show the selected option
						//=>getSetting(cState)
				}
				//joystick right
				if((PORTC->PCR[RIGHT] & 0x01000000)==0x01000000){ //check if interrupt was called on right pin
					cState=++cState%4; //go to the next option
					PORTC->PCR[RIGHT] &= ~(0 << 24); //clear the interrupt for the right pin
					//TODO: show the selected option
						//=>getSetting(cState)
				}
				break;
			case 1: //SETTIME
			case 2: //SETALARM
				//joystick left
				if((PORTC->PCR[LEFT] & 0x01000000)==0x01000000){
					if (cState==0){ //go to the previous option
						cState=2;
					}
					else{
						cState = --cState % 3;
					}
					PORTC->PCR[LEFT] &= ~(0 << 24); //clear the interrupt for the left pin
				}
				//joystick right
				if((PORTC->PCR[RIGHT] & 0x01000000)==0x01000000){ //check if interrupt was called on right pin
					cState=++cState%3; //go to the next option
					PORTC->PCR[RIGHT] &= ~(0 << 24); //clear the interrupt for the right pin
				}
				break;
			case 3: //SETMUSIC
				//TODO:
				//joystick left
					//set previous music tone, clr interrupt
				//joystick right
					//set next music tone, clr interrupt
				break;
			case 4: //ALARM
				//joystick left or right ==> do nothing and clear the interrupts
				if(((PORTC->PCR[LEFT] & 0x01000000)==0x01000000) || ((PORTC->PCR[RIGHT] & 0x01000000)==0x01000000)){
					PORTC->PCR[LEFT] &= ~(0 << 24); //clear the interrupt for the left pin
					PORTC->PCR[RIGHT] &= ~(0 << 24); //clear the interrupt for the right pin
				}
				break;
			default:
				//do nothing
				break;
		}

}

void PORTB_IRQHandler(void){
	switch(getState()){
		case 0: //STANDARD
			if((PORTB->PCR[CENTER] & 0x01000000)==0x01000000){ //check if interrupt was called on CENTER pin
				setState(0);
				PORTB->PCR[CENTER] &= ~(0 << 24);  //Clear the interrupt for the CENTER pin
			}
			//nothing needs to happen here for the up and down pins so just clear the interrupts
			if(((PORTB->PCR[UP] & 0x01000000)==0x01000000) || ((PORTB->PCR[DOWN] & 0x01000000)==0x01000000)){
				PORTB->PCR[UP] &= ~(0 << 24);  // clear the interrupt for the up pin
				PORTB->PCR[DOWN] &= ~(0 << 24); //clear the interrupt for the down pin
			}
			break;
		case 1: //SETTIME
			//joystick center
			if((PORTB->PCR[CENTER] & 0x01000000)==0x01000000){ //check if interrupt was called on CENTER pin
				setState(0); //0==STANDARD state
				timePart=0; //Set back to hour
				PORTB->PCR[CENTER] &= ~(0 << 24);  //Clear the interrupt for the CENTER pin
			}
			//joystick down
			if((PORTB->PCR[DOWN] & 0x01000000)==0x01000000){ //check if interrupt was called on DOWN pin
				decrementTime(timePart);
				PORTB->PCR[DOWN] &= ~(0 << 24); //clear the interrupt for the DOWN pin
			}
			//joystick up
			if((PORTB->PCR[UP] & 0x01000000)==0x01000000){ //check if interrupt was called on up pin
				incrementTime(timePart);
				PORTB->PCR[CENTER] &= ~(0 << 24);  //clear the interrupt for the UP pin
			}
			break;
		case 2: //SETALARM
			//joystick center
			if((PORTB->PCR[CENTER] & 0x01000000)==0x01000000){ //check if interrupt was called on CENTER pin
				setState(0); //0==STANDARD state
				timePart=0; //Set back to hour
				PORTB->PCR[CENTER] &= ~(0 << 24);  //Clear the interrupt for the center pin
			}

			//if down ==>decrementTime(getTimeParts), clr interrupt
			//if up ==> incrementTime(getTimeParts), clr interrupt
			break;
		case 3: //SETMUSIC
			//joystick center
			if((PORTB->PCR[CENTER] & 0x01000000)==0x01000000){ //check if interrupt was called on CENTER pin
				setState(0); //0==STANDARD state
				PORTB->PCR[CENTER] &= ~(0 << 24);  //Clear the interrupt for the center pin
			}
			//if down ==>do nothing, clr interrupt
			//if up ==>do nothing, clr interrupt
			break;
		case 4: //ALARM
			//if center ==> alarmOnOff=0;, clr interrupt,
			//state will be changed in main when everything is turned of from the main
			break;
		default:
			setState(0); //go to standard state, just in case something went wrong
			break;
	}

}
